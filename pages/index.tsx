import Head from 'next/head';
import styles from '../styles/Home.module.css';
import Game from '../components/Game';
import dayjs from 'dayjs';

import path from 'path';
import { promises as fs } from 'fs';
import {
  FormattedPlayer,
  FormattedTeam,
  BasicAnswer,
  FormattedYear,
} from '../custom-types';
import Header from '../components/Header';

import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { S3Client, GetObjectCommand } from '@aws-sdk/client-s3';

type HomeProps = {
  teams: FormattedTeam[];
  players: FormattedPlayer[];
  years: FormattedYear[];
  answer: BasicAnswer;
};

const Home: React.FC<HomeProps> = ({
  teams,
  players,
  answer,
  years,
}) => {
  return (
    <>
      <Head>
        <title>worldiesle</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Header />
        <div className={styles.bodyContent}>
          <div className="inner-container inner-container--hero">
            <h1 className={styles.heroText}>
              Guess the teams, scorer and year of this iconic or
              <span className="highlighted-text-secondary">
                {' '}
                worldie
              </span>{' '}
              goal from the pictures below
            </h1>
          </div>
          <Game
            teams={teams}
            players={players}
            years={years}
            answer={answer}
          />
        </div>
      </main>
    </>
  );
};

const LAUNCH_DATE = '2023-01-04';
const START_YEAR = 1994;

const getJsonFileFromS3 = async (fileName: string) => {
  const clientParams = {
    region: 'eu-west-2',
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID as string,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY as string,
    },
  };
  const s3Client = new S3Client(clientParams);
  const command = new GetObjectCommand({
    Bucket: 'worldiesle',
    Key: fileName,
  });
  // return file as json object
  const signedUrl = await getSignedUrl(s3Client, command, {
    expiresIn: 36 * 60 * 60,
  });
  const response = await fetch(signedUrl);
  const data = await response.json();
  return data;
};

const recursivelyGetSignedS3Images = async (
  i: number,
  signedUrls: string[],
  daysSinceLaunch: number,
  s3Client: any
): Promise<string[]> => {
  const command = new GetObjectCommand({
    Bucket: 'worldiesle',
    Key: `${daysSinceLaunch}/${i}.png`,
  });
  const signedUrl = await getSignedUrl(s3Client, command, {
    expiresIn: 36 * 60 * 60,
  });

  let newArray = [...signedUrls, signedUrl];
  if (i === 5) {
    return newArray;
  }

  return recursivelyGetSignedS3Images(
    i + 1,
    newArray,
    daysSinceLaunch,
    s3Client
  );
};

const getSignedS3Images = async (daysSinceLaunch: number) => {
  const clientParams = {
    region: 'eu-west-2',
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID as string,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY as string,
    },
  };
  const s3Client = new S3Client(clientParams);

  const signedUrls = await recursivelyGetSignedS3Images(
    1,
    [],
    daysSinceLaunch,
    s3Client
  );

  return signedUrls;
};

export async function getStaticProps() {
  const END_YEAR = dayjs().year();
  const daysSinceLaunch = dayjs().diff(LAUNCH_DATE, 'day');

  const jsonDirectory = path.join(process.cwd(), 'data');
  // Get the teams for suggestions
  const teamsFile = await fs.readFile(
    jsonDirectory + '/teams.json',
    'utf8'
  );
  // Get the players for suggestions
  const playersFile = await fs.readFile(
    jsonDirectory + '/players.json',
    'utf8'
  );

  const answer: BasicAnswer = {
    dateId: 'test',
    dayNumber: daysSinceLaunch,
    teamA: 'CHE',
    teamB: 'LIV',
    player: 'Mohamed Salah',
    year: 2020,
    competition: 'Premier League',
    link: 'http://youtube.com',
    homeTeamMatters: true,
  };

  const years: FormattedYear[] = [];
  for (let i = START_YEAR; i <= END_YEAR; i++) {
    years.push({
      id: i.toString(),
      names: [i.toString()],
    });
  }

  const signedUrls = await getSignedS3Images(1);

  return {
    props: {
      teams: JSON.parse(teamsFile),
      players: JSON.parse(playersFile),
      years,
      answer,
    },
  };
}

export default Home;
